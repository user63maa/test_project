#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Eco
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Ecosystem")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccess(Access instance);
    partial void UpdateAccess(Access instance);
    partial void DeleteAccess(Access instance);
    partial void InsertAccessRole(AccessRole instance);
    partial void UpdateAccessRole(AccessRole instance);
    partial void DeleteAccessRole(AccessRole instance);
    partial void InsertCalculationCompositionForm(CalculationCompositionForm instance);
    partial void UpdateCalculationCompositionForm(CalculationCompositionForm instance);
    partial void DeleteCalculationCompositionForm(CalculationCompositionForm instance);
    partial void InsertCalculationCompositionForReport(CalculationCompositionForReport instance);
    partial void UpdateCalculationCompositionForReport(CalculationCompositionForReport instance);
    partial void DeleteCalculationCompositionForReport(CalculationCompositionForReport instance);
    partial void InsertCalculationResult(CalculationResult instance);
    partial void UpdateCalculationResult(CalculationResult instance);
    partial void DeleteCalculationResult(CalculationResult instance);
    partial void InsertCategoryOfFuel(CategoryOfFuel instance);
    partial void UpdateCategoryOfFuel(CategoryOfFuel instance);
    partial void DeleteCategoryOfFuel(CategoryOfFuel instance);
    partial void InsertCategoryOfFuelColumnsDictionary(CategoryOfFuelColumnsDictionary instance);
    partial void UpdateCategoryOfFuelColumnsDictionary(CategoryOfFuelColumnsDictionary instance);
    partial void DeleteCategoryOfFuelColumnsDictionary(CategoryOfFuelColumnsDictionary instance);
    partial void InsertCompanyDO(CompanyDO instance);
    partial void UpdateCompanyDO(CompanyDO instance);
    partial void DeleteCompanyDO(CompanyDO instance);
    partial void InsertEnergySystem(EnergySystem instance);
    partial void UpdateEnergySystem(EnergySystem instance);
    partial void DeleteEnergySystem(EnergySystem instance);
    partial void InsertFlareCondition(FlareCondition instance);
    partial void UpdateFlareCondition(FlareCondition instance);
    partial void DeleteFlareCondition(FlareCondition instance);
    partial void InsertFlareMeasurementCondition(FlareMeasurementCondition instance);
    partial void UpdateFlareMeasurementCondition(FlareMeasurementCondition instance);
    partial void DeleteFlareMeasurementCondition(FlareMeasurementCondition instance);
    partial void InsertGroupOfFuel(GroupOfFuel instance);
    partial void UpdateGroupOfFuel(GroupOfFuel instance);
    partial void DeleteGroupOfFuel(GroupOfFuel instance);
    partial void InsertProductionSite(ProductionSite instance);
    partial void UpdateProductionSite(ProductionSite instance);
    partial void DeleteProductionSite(ProductionSite instance);
    partial void InsertSourceOfEmission(SourceOfEmission instance);
    partial void UpdateSourceOfEmission(SourceOfEmission instance);
    partial void DeleteSourceOfEmission(SourceOfEmission instance);
    partial void InsertSourceOfEmissionFuel(SourceOfEmissionFuel instance);
    partial void UpdateSourceOfEmissionFuel(SourceOfEmissionFuel instance);
    partial void DeleteSourceOfEmissionFuel(SourceOfEmissionFuel instance);
    partial void InsertTypeOfFuel(TypeOfFuel instance);
    partial void UpdateTypeOfFuel(TypeOfFuel instance);
    partial void DeleteTypeOfFuel(TypeOfFuel instance);
    partial void InsertTypeOfFuelForFlareCombustion(TypeOfFuelForFlareCombustion instance);
    partial void UpdateTypeOfFuelForFlareCombustion(TypeOfFuelForFlareCombustion instance);
    partial void DeleteTypeOfFuelForFlareCombustion(TypeOfFuelForFlareCombustion instance);
    partial void InsertTypeOfFuelForFugitivEmission(TypeOfFuelForFugitivEmission instance);
    partial void UpdateTypeOfFuelForFugitivEmission(TypeOfFuelForFugitivEmission instance);
    partial void DeleteTypeOfFuelForFugitivEmission(TypeOfFuelForFugitivEmission instance);
    partial void InsertTypeOfFuelForTransport(TypeOfFuelForTransport instance);
    partial void UpdateTypeOfFuelForTransport(TypeOfFuelForTransport instance);
    partial void DeleteTypeOfFuelForTransport(TypeOfFuelForTransport instance);
    partial void InsertTypesForCategoryFuel(TypesForCategoryFuel instance);
    partial void UpdateTypesForCategoryFuel(TypesForCategoryFuel instance);
    partial void DeleteTypesForCategoryFuel(TypesForCategoryFuel instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::Eco.Properties.Settings.Default.EcosystemConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Access> Accesses
		{
			get
			{
				return this.GetTable<Access>();
			}
		}
		
		public System.Data.Linq.Table<AccessRole> AccessRoles
		{
			get
			{
				return this.GetTable<AccessRole>();
			}
		}
		
		public System.Data.Linq.Table<CalculationCompositionForm> CalculationCompositionForms
		{
			get
			{
				return this.GetTable<CalculationCompositionForm>();
			}
		}
		
		public System.Data.Linq.Table<CalculationCompositionForReport> CalculationCompositionForReports
		{
			get
			{
				return this.GetTable<CalculationCompositionForReport>();
			}
		}
		
		public System.Data.Linq.Table<CalculationResult> CalculationResults
		{
			get
			{
				return this.GetTable<CalculationResult>();
			}
		}
		
		public System.Data.Linq.Table<CategoryOfFuel> CategoryOfFuels
		{
			get
			{
				return this.GetTable<CategoryOfFuel>();
			}
		}
		
		public System.Data.Linq.Table<CategoryOfFuelColumnsDictionary> CategoryOfFuelColumnsDictionaries
		{
			get
			{
				return this.GetTable<CategoryOfFuelColumnsDictionary>();
			}
		}
		
		public System.Data.Linq.Table<CompanyDO> CompanyDOs
		{
			get
			{
				return this.GetTable<CompanyDO>();
			}
		}
		
		public System.Data.Linq.Table<EnergySystem> EnergySystems
		{
			get
			{
				return this.GetTable<EnergySystem>();
			}
		}
		
		public System.Data.Linq.Table<FlareCondition> FlareConditions
		{
			get
			{
				return this.GetTable<FlareCondition>();
			}
		}
		
		public System.Data.Linq.Table<FlareMeasurementCondition> FlareMeasurementConditions
		{
			get
			{
				return this.GetTable<FlareMeasurementCondition>();
			}
		}
		
		public System.Data.Linq.Table<GroupOfFuel> GroupOfFuels
		{
			get
			{
				return this.GetTable<GroupOfFuel>();
			}
		}
		
		public System.Data.Linq.Table<ProductionSite> ProductionSites
		{
			get
			{
				return this.GetTable<ProductionSite>();
			}
		}
		
		public System.Data.Linq.Table<SourceOfEmission> SourceOfEmissions
		{
			get
			{
				return this.GetTable<SourceOfEmission>();
			}
		}
		
		public System.Data.Linq.Table<SourceOfEmissionFuel> SourceOfEmissionFuels
		{
			get
			{
				return this.GetTable<SourceOfEmissionFuel>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfFuel> TypeOfFuels
		{
			get
			{
				return this.GetTable<TypeOfFuel>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfFuelForFlareCombustion> TypeOfFuelForFlareCombustions
		{
			get
			{
				return this.GetTable<TypeOfFuelForFlareCombustion>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfFuelForFugitivEmission> TypeOfFuelForFugitivEmissions
		{
			get
			{
				return this.GetTable<TypeOfFuelForFugitivEmission>();
			}
		}
		
		public System.Data.Linq.Table<TypeOfFuelForTransport> TypeOfFuelForTransports
		{
			get
			{
				return this.GetTable<TypeOfFuelForTransport>();
			}
		}
		
		public System.Data.Linq.Table<TypesForCategoryFuel> TypesForCategoryFuels
		{
			get
			{
				return this.GetTable<TypesForCategoryFuel>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Access")]
	public partial class Access : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _PersonnelLogin;
		
		private string _Comment;
		
		private System.Nullable<System.DateTime> _Date;
		
		private System.Nullable<int> _AccessRoles_id;
		
		private EntityRef<AccessRole> _AccessRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnPersonnelLoginChanging(string value);
    partial void OnPersonnelLoginChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnDateChanging(System.Nullable<System.DateTime> value);
    partial void OnDateChanged();
    partial void OnAccessRoles_idChanging(System.Nullable<int> value);
    partial void OnAccessRoles_idChanged();
    #endregion
		
		public Access()
		{
			this._AccessRole = default(EntityRef<AccessRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelLogin", DbType="VarChar(50)")]
		public string PersonnelLogin
		{
			get
			{
				return this._PersonnelLogin;
			}
			set
			{
				if ((this._PersonnelLogin != value))
				{
					this.OnPersonnelLoginChanging(value);
					this.SendPropertyChanging();
					this._PersonnelLogin = value;
					this.SendPropertyChanged("PersonnelLogin");
					this.OnPersonnelLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(100)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime")]
		public System.Nullable<System.DateTime> Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessRoles_id", DbType="Int")]
		public System.Nullable<int> AccessRoles_id
		{
			get
			{
				return this._AccessRoles_id;
			}
			set
			{
				if ((this._AccessRoles_id != value))
				{
					if (this._AccessRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAccessRoles_idChanging(value);
					this.SendPropertyChanging();
					this._AccessRoles_id = value;
					this.SendPropertyChanged("AccessRoles_id");
					this.OnAccessRoles_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessRole_Access", Storage="_AccessRole", ThisKey="AccessRoles_id", OtherKey="id", IsForeignKey=true)]
		public AccessRole AccessRole
		{
			get
			{
				return this._AccessRole.Entity;
			}
			set
			{
				AccessRole previousValue = this._AccessRole.Entity;
				if (((previousValue != value) 
							|| (this._AccessRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AccessRole.Entity = null;
						previousValue.Accesses.Remove(this);
					}
					this._AccessRole.Entity = value;
					if ((value != null))
					{
						value.Accesses.Add(this);
						this._AccessRoles_id = value.id;
					}
					else
					{
						this._AccessRoles_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("AccessRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessRoles")]
	public partial class AccessRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _Description;
		
		private EntitySet<Access> _Accesses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public AccessRole()
		{
			this._Accesses = new EntitySet<Access>(new Action<Access>(this.attach_Accesses), new Action<Access>(this.detach_Accesses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(500)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="AccessRole_Access", Storage="_Accesses", ThisKey="id", OtherKey="AccessRoles_id")]
		public EntitySet<Access> Accesses
		{
			get
			{
				return this._Accesses;
			}
			set
			{
				this._Accesses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accesses(Access entity)
		{
			this.SendPropertyChanging();
			entity.AccessRole = this;
		}
		
		private void detach_Accesses(Access entity)
		{
			this.SendPropertyChanging();
			entity.AccessRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CalculationCompositionForm")]
	public partial class CalculationCompositionForm : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ControlName;
		
		private string _ControlValue;
		
		private System.Nullable<int> _CalculationResult_id;
		
		private EntityRef<CalculationResult> _CalculationResult;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnControlNameChanging(string value);
    partial void OnControlNameChanged();
    partial void OnControlValueChanging(string value);
    partial void OnControlValueChanged();
    partial void OnCalculationResult_idChanging(System.Nullable<int> value);
    partial void OnCalculationResult_idChanged();
    #endregion
		
		public CalculationCompositionForm()
		{
			this._CalculationResult = default(EntityRef<CalculationResult>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlName", DbType="VarChar(100)")]
		public string ControlName
		{
			get
			{
				return this._ControlName;
			}
			set
			{
				if ((this._ControlName != value))
				{
					this.OnControlNameChanging(value);
					this.SendPropertyChanging();
					this._ControlName = value;
					this.SendPropertyChanged("ControlName");
					this.OnControlNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ControlValue", DbType="VarChar(50)")]
		public string ControlValue
		{
			get
			{
				return this._ControlValue;
			}
			set
			{
				if ((this._ControlValue != value))
				{
					this.OnControlValueChanging(value);
					this.SendPropertyChanging();
					this._ControlValue = value;
					this.SendPropertyChanged("ControlValue");
					this.OnControlValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationResult_id", DbType="Int")]
		public System.Nullable<int> CalculationResult_id
		{
			get
			{
				return this._CalculationResult_id;
			}
			set
			{
				if ((this._CalculationResult_id != value))
				{
					if (this._CalculationResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalculationResult_idChanging(value);
					this.SendPropertyChanging();
					this._CalculationResult_id = value;
					this.SendPropertyChanged("CalculationResult_id");
					this.OnCalculationResult_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculationResult_CalculationCompositionForm", Storage="_CalculationResult", ThisKey="CalculationResult_id", OtherKey="id", IsForeignKey=true)]
		public CalculationResult CalculationResult
		{
			get
			{
				return this._CalculationResult.Entity;
			}
			set
			{
				CalculationResult previousValue = this._CalculationResult.Entity;
				if (((previousValue != value) 
							|| (this._CalculationResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CalculationResult.Entity = null;
						previousValue.CalculationCompositionForms.Remove(this);
					}
					this._CalculationResult.Entity = value;
					if ((value != null))
					{
						value.CalculationCompositionForms.Add(this);
						this._CalculationResult_id = value.id;
					}
					else
					{
						this._CalculationResult_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("CalculationResult");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CalculationCompositionForReport")]
	public partial class CalculationCompositionForReport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _CellValue;
		
		private System.Nullable<int> _CalculationResult_id;
		
		private System.Nullable<int> _ColNumber;
		
		private System.Nullable<int> _RowNumber;
		
		private EntityRef<CalculationResult> _CalculationResult;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCellValueChanging(string value);
    partial void OnCellValueChanged();
    partial void OnCalculationResult_idChanging(System.Nullable<int> value);
    partial void OnCalculationResult_idChanged();
    partial void OnColNumberChanging(System.Nullable<int> value);
    partial void OnColNumberChanged();
    partial void OnRowNumberChanging(System.Nullable<int> value);
    partial void OnRowNumberChanged();
    #endregion
		
		public CalculationCompositionForReport()
		{
			this._CalculationResult = default(EntityRef<CalculationResult>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CellValue", DbType="VarChar(500)")]
		public string CellValue
		{
			get
			{
				return this._CellValue;
			}
			set
			{
				if ((this._CellValue != value))
				{
					this.OnCellValueChanging(value);
					this.SendPropertyChanging();
					this._CellValue = value;
					this.SendPropertyChanged("CellValue");
					this.OnCellValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CalculationResult_id", DbType="Int")]
		public System.Nullable<int> CalculationResult_id
		{
			get
			{
				return this._CalculationResult_id;
			}
			set
			{
				if ((this._CalculationResult_id != value))
				{
					if (this._CalculationResult.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCalculationResult_idChanging(value);
					this.SendPropertyChanging();
					this._CalculationResult_id = value;
					this.SendPropertyChanged("CalculationResult_id");
					this.OnCalculationResult_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ColNumber", DbType="Int")]
		public System.Nullable<int> ColNumber
		{
			get
			{
				return this._ColNumber;
			}
			set
			{
				if ((this._ColNumber != value))
				{
					this.OnColNumberChanging(value);
					this.SendPropertyChanging();
					this._ColNumber = value;
					this.SendPropertyChanged("ColNumber");
					this.OnColNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RowNumber", DbType="Int")]
		public System.Nullable<int> RowNumber
		{
			get
			{
				return this._RowNumber;
			}
			set
			{
				if ((this._RowNumber != value))
				{
					this.OnRowNumberChanging(value);
					this.SendPropertyChanging();
					this._RowNumber = value;
					this.SendPropertyChanged("RowNumber");
					this.OnRowNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculationResult_CalculationCompositionForReport", Storage="_CalculationResult", ThisKey="CalculationResult_id", OtherKey="id", IsForeignKey=true)]
		public CalculationResult CalculationResult
		{
			get
			{
				return this._CalculationResult.Entity;
			}
			set
			{
				CalculationResult previousValue = this._CalculationResult.Entity;
				if (((previousValue != value) 
							|| (this._CalculationResult.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CalculationResult.Entity = null;
						previousValue.CalculationCompositionForReports.Remove(this);
					}
					this._CalculationResult.Entity = value;
					if ((value != null))
					{
						value.CalculationCompositionForReports.Add(this);
						this._CalculationResult_id = value.id;
					}
					else
					{
						this._CalculationResult_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("CalculationResult");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CalculationResult")]
	public partial class CalculationResult : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<int> _SourceOfEmissionFuel_id;
		
		private System.Nullable<double> _ResultSum;
		
		private System.Nullable<System.DateTime> _SaveDate;
		
		private string _PersonnelLogin;
		
		private EntitySet<CalculationCompositionForm> _CalculationCompositionForms;
		
		private EntitySet<CalculationCompositionForReport> _CalculationCompositionForReports;
		
		private EntityRef<SourceOfEmissionFuel> _SourceOfEmissionFuel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSourceOfEmissionFuel_idChanging(System.Nullable<int> value);
    partial void OnSourceOfEmissionFuel_idChanged();
    partial void OnResultSumChanging(System.Nullable<double> value);
    partial void OnResultSumChanged();
    partial void OnSaveDateChanging(System.Nullable<System.DateTime> value);
    partial void OnSaveDateChanged();
    partial void OnPersonnelLoginChanging(string value);
    partial void OnPersonnelLoginChanged();
    #endregion
		
		public CalculationResult()
		{
			this._CalculationCompositionForms = new EntitySet<CalculationCompositionForm>(new Action<CalculationCompositionForm>(this.attach_CalculationCompositionForms), new Action<CalculationCompositionForm>(this.detach_CalculationCompositionForms));
			this._CalculationCompositionForReports = new EntitySet<CalculationCompositionForReport>(new Action<CalculationCompositionForReport>(this.attach_CalculationCompositionForReports), new Action<CalculationCompositionForReport>(this.detach_CalculationCompositionForReports));
			this._SourceOfEmissionFuel = default(EntityRef<SourceOfEmissionFuel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceOfEmissionFuel_id", DbType="Int")]
		public System.Nullable<int> SourceOfEmissionFuel_id
		{
			get
			{
				return this._SourceOfEmissionFuel_id;
			}
			set
			{
				if ((this._SourceOfEmissionFuel_id != value))
				{
					if (this._SourceOfEmissionFuel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceOfEmissionFuel_idChanging(value);
					this.SendPropertyChanging();
					this._SourceOfEmissionFuel_id = value;
					this.SendPropertyChanged("SourceOfEmissionFuel_id");
					this.OnSourceOfEmissionFuel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResultSum", DbType="Float")]
		public System.Nullable<double> ResultSum
		{
			get
			{
				return this._ResultSum;
			}
			set
			{
				if ((this._ResultSum != value))
				{
					this.OnResultSumChanging(value);
					this.SendPropertyChanging();
					this._ResultSum = value;
					this.SendPropertyChanged("ResultSum");
					this.OnResultSumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SaveDate", DbType="DateTime")]
		public System.Nullable<System.DateTime> SaveDate
		{
			get
			{
				return this._SaveDate;
			}
			set
			{
				if ((this._SaveDate != value))
				{
					this.OnSaveDateChanging(value);
					this.SendPropertyChanging();
					this._SaveDate = value;
					this.SendPropertyChanged("SaveDate");
					this.OnSaveDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PersonnelLogin", DbType="VarChar(50)")]
		public string PersonnelLogin
		{
			get
			{
				return this._PersonnelLogin;
			}
			set
			{
				if ((this._PersonnelLogin != value))
				{
					this.OnPersonnelLoginChanging(value);
					this.SendPropertyChanging();
					this._PersonnelLogin = value;
					this.SendPropertyChanged("PersonnelLogin");
					this.OnPersonnelLoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculationResult_CalculationCompositionForm", Storage="_CalculationCompositionForms", ThisKey="id", OtherKey="CalculationResult_id")]
		public EntitySet<CalculationCompositionForm> CalculationCompositionForms
		{
			get
			{
				return this._CalculationCompositionForms;
			}
			set
			{
				this._CalculationCompositionForms.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CalculationResult_CalculationCompositionForReport", Storage="_CalculationCompositionForReports", ThisKey="id", OtherKey="CalculationResult_id")]
		public EntitySet<CalculationCompositionForReport> CalculationCompositionForReports
		{
			get
			{
				return this._CalculationCompositionForReports;
			}
			set
			{
				this._CalculationCompositionForReports.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceOfEmissionFuel_CalculationResult", Storage="_SourceOfEmissionFuel", ThisKey="SourceOfEmissionFuel_id", OtherKey="id", IsForeignKey=true)]
		public SourceOfEmissionFuel SourceOfEmissionFuel
		{
			get
			{
				return this._SourceOfEmissionFuel.Entity;
			}
			set
			{
				SourceOfEmissionFuel previousValue = this._SourceOfEmissionFuel.Entity;
				if (((previousValue != value) 
							|| (this._SourceOfEmissionFuel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceOfEmissionFuel.Entity = null;
						previousValue.CalculationResults.Remove(this);
					}
					this._SourceOfEmissionFuel.Entity = value;
					if ((value != null))
					{
						value.CalculationResults.Add(this);
						this._SourceOfEmissionFuel_id = value.id;
					}
					else
					{
						this._SourceOfEmissionFuel_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("SourceOfEmissionFuel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CalculationCompositionForms(CalculationCompositionForm entity)
		{
			this.SendPropertyChanging();
			entity.CalculationResult = this;
		}
		
		private void detach_CalculationCompositionForms(CalculationCompositionForm entity)
		{
			this.SendPropertyChanging();
			entity.CalculationResult = null;
		}
		
		private void attach_CalculationCompositionForReports(CalculationCompositionForReport entity)
		{
			this.SendPropertyChanging();
			entity.CalculationResult = this;
		}
		
		private void detach_CalculationCompositionForReports(CalculationCompositionForReport entity)
		{
			this.SendPropertyChanging();
			entity.CalculationResult = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryOfFuel")]
	public partial class CategoryOfFuel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _CategoryName;
		
		private string _FuelTableName;
		
		private string _SumCategoryName;
		
		private EntitySet<SourceOfEmissionFuel> _SourceOfEmissionFuels;
		
		private EntitySet<TypesForCategoryFuel> _TypesForCategoryFuels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCategoryNameChanging(string value);
    partial void OnCategoryNameChanged();
    partial void OnFuelTableNameChanging(string value);
    partial void OnFuelTableNameChanged();
    partial void OnSumCategoryNameChanging(string value);
    partial void OnSumCategoryNameChanged();
    #endregion
		
		public CategoryOfFuel()
		{
			this._SourceOfEmissionFuels = new EntitySet<SourceOfEmissionFuel>(new Action<SourceOfEmissionFuel>(this.attach_SourceOfEmissionFuels), new Action<SourceOfEmissionFuel>(this.detach_SourceOfEmissionFuels));
			this._TypesForCategoryFuels = new EntitySet<TypesForCategoryFuel>(new Action<TypesForCategoryFuel>(this.attach_TypesForCategoryFuels), new Action<TypesForCategoryFuel>(this.detach_TypesForCategoryFuels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryName", DbType="VarChar(500)")]
		public string CategoryName
		{
			get
			{
				return this._CategoryName;
			}
			set
			{
				if ((this._CategoryName != value))
				{
					this.OnCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._CategoryName = value;
					this.SendPropertyChanged("CategoryName");
					this.OnCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FuelTableName", DbType="VarChar(100)")]
		public string FuelTableName
		{
			get
			{
				return this._FuelTableName;
			}
			set
			{
				if ((this._FuelTableName != value))
				{
					this.OnFuelTableNameChanging(value);
					this.SendPropertyChanging();
					this._FuelTableName = value;
					this.SendPropertyChanged("FuelTableName");
					this.OnFuelTableNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SumCategoryName", DbType="VarChar(500)")]
		public string SumCategoryName
		{
			get
			{
				return this._SumCategoryName;
			}
			set
			{
				if ((this._SumCategoryName != value))
				{
					this.OnSumCategoryNameChanging(value);
					this.SendPropertyChanging();
					this._SumCategoryName = value;
					this.SendPropertyChanged("SumCategoryName");
					this.OnSumCategoryNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryOfFuel_SourceOfEmissionFuel", Storage="_SourceOfEmissionFuels", ThisKey="id", OtherKey="CategoryOfFuel_id")]
		public EntitySet<SourceOfEmissionFuel> SourceOfEmissionFuels
		{
			get
			{
				return this._SourceOfEmissionFuels;
			}
			set
			{
				this._SourceOfEmissionFuels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryOfFuel_TypesForCategoryFuel", Storage="_TypesForCategoryFuels", ThisKey="id", OtherKey="CategoryOfFuel_id")]
		public EntitySet<TypesForCategoryFuel> TypesForCategoryFuels
		{
			get
			{
				return this._TypesForCategoryFuels;
			}
			set
			{
				this._TypesForCategoryFuels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SourceOfEmissionFuels(SourceOfEmissionFuel entity)
		{
			this.SendPropertyChanging();
			entity.CategoryOfFuel = this;
		}
		
		private void detach_SourceOfEmissionFuels(SourceOfEmissionFuel entity)
		{
			this.SendPropertyChanging();
			entity.CategoryOfFuel = null;
		}
		
		private void attach_TypesForCategoryFuels(TypesForCategoryFuel entity)
		{
			this.SendPropertyChanging();
			entity.CategoryOfFuel = this;
		}
		
		private void detach_TypesForCategoryFuels(TypesForCategoryFuel entity)
		{
			this.SendPropertyChanging();
			entity.CategoryOfFuel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CategoryOfFuelColumnsDictionary")]
	public partial class CategoryOfFuelColumnsDictionary : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Characteristic;
		
		private System.Nullable<bool> _isHasDefValue;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCharacteristicChanging(string value);
    partial void OnCharacteristicChanged();
    partial void OnisHasDefValueChanging(System.Nullable<bool> value);
    partial void OnisHasDefValueChanged();
    #endregion
		
		public CategoryOfFuelColumnsDictionary()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Characteristic", DbType="VarChar(500)")]
		public string Characteristic
		{
			get
			{
				return this._Characteristic;
			}
			set
			{
				if ((this._Characteristic != value))
				{
					this.OnCharacteristicChanging(value);
					this.SendPropertyChanging();
					this._Characteristic = value;
					this.SendPropertyChanged("Characteristic");
					this.OnCharacteristicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isHasDefValue", DbType="Bit")]
		public System.Nullable<bool> isHasDefValue
		{
			get
			{
				return this._isHasDefValue;
			}
			set
			{
				if ((this._isHasDefValue != value))
				{
					this.OnisHasDefValueChanging(value);
					this.SendPropertyChanging();
					this._isHasDefValue = value;
					this.SendPropertyChanged("isHasDefValue");
					this.OnisHasDefValueChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CompanyDO")]
	public partial class CompanyDO : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _ShortName;
		
		private System.Nullable<bool> _IsDeleted;
		
		private EntitySet<ProductionSite> _ProductionSites;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnShortNameChanging(string value);
    partial void OnShortNameChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    #endregion
		
		public CompanyDO()
		{
			this._ProductionSites = new EntitySet<ProductionSite>(new Action<ProductionSite>(this.attach_ProductionSites), new Action<ProductionSite>(this.detach_ProductionSites));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ShortName", DbType="VarChar(100)")]
		public string ShortName
		{
			get
			{
				return this._ShortName;
			}
			set
			{
				if ((this._ShortName != value))
				{
					this.OnShortNameChanging(value);
					this.SendPropertyChanging();
					this._ShortName = value;
					this.SendPropertyChanged("ShortName");
					this.OnShortNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyDO_ProductionSite", Storage="_ProductionSites", ThisKey="id", OtherKey="CompanyDO_id")]
		public EntitySet<ProductionSite> ProductionSites
		{
			get
			{
				return this._ProductionSites;
			}
			set
			{
				this._ProductionSites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ProductionSites(ProductionSite entity)
		{
			this.SendPropertyChanging();
			entity.CompanyDO = this;
		}
		
		private void detach_ProductionSites(ProductionSite entity)
		{
			this.SendPropertyChanging();
			entity.CompanyDO = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.EnergySystem")]
	public partial class EnergySystem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private System.Nullable<int> _Coef1;
		
		private System.Nullable<int> _Coef2;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCoef1Changing(System.Nullable<int> value);
    partial void OnCoef1Changed();
    partial void OnCoef2Changing(System.Nullable<int> value);
    partial void OnCoef2Changed();
    #endregion
		
		public EnergySystem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coef1", DbType="Int")]
		public System.Nullable<int> Coef1
		{
			get
			{
				return this._Coef1;
			}
			set
			{
				if ((this._Coef1 != value))
				{
					this.OnCoef1Changing(value);
					this.SendPropertyChanging();
					this._Coef1 = value;
					this.SendPropertyChanged("Coef1");
					this.OnCoef1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Coef2", DbType="Int")]
		public System.Nullable<int> Coef2
		{
			get
			{
				return this._Coef2;
			}
			set
			{
				if ((this._Coef2 != value))
				{
					this.OnCoef2Changing(value);
					this.SendPropertyChanging();
					this._Coef2 = value;
					this.SendPropertyChanged("Coef2");
					this.OnCoef2Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlareCondition")]
	public partial class FlareCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _ConditionName;
		
		private System.Nullable<double> _CoefficientUnderburning;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnConditionNameChanging(string value);
    partial void OnConditionNameChanged();
    partial void OnCoefficientUnderburningChanging(System.Nullable<double> value);
    partial void OnCoefficientUnderburningChanged();
    #endregion
		
		public FlareCondition()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConditionName", DbType="VarChar(500)")]
		public string ConditionName
		{
			get
			{
				return this._ConditionName;
			}
			set
			{
				if ((this._ConditionName != value))
				{
					this.OnConditionNameChanging(value);
					this.SendPropertyChanging();
					this._ConditionName = value;
					this.SendPropertyChanged("ConditionName");
					this.OnConditionNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CoefficientUnderburning", DbType="Float")]
		public System.Nullable<double> CoefficientUnderburning
		{
			get
			{
				return this._CoefficientUnderburning;
			}
			set
			{
				if ((this._CoefficientUnderburning != value))
				{
					this.OnCoefficientUnderburningChanging(value);
					this.SendPropertyChanging();
					this._CoefficientUnderburning = value;
					this.SendPropertyChanged("CoefficientUnderburning");
					this.OnCoefficientUnderburningChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FlareMeasurementCondition")]
	public partial class FlareMeasurementCondition : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Condition;
		
		private System.Nullable<double> _DencityCO2;
		
		private System.Nullable<double> _DencityCH4;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnConditionChanging(string value);
    partial void OnConditionChanged();
    partial void OnDencityCO2Changing(System.Nullable<double> value);
    partial void OnDencityCO2Changed();
    partial void OnDencityCH4Changing(System.Nullable<double> value);
    partial void OnDencityCH4Changed();
    #endregion
		
		public FlareMeasurementCondition()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Condition", DbType="NVarChar(500)")]
		public string Condition
		{
			get
			{
				return this._Condition;
			}
			set
			{
				if ((this._Condition != value))
				{
					this.OnConditionChanging(value);
					this.SendPropertyChanging();
					this._Condition = value;
					this.SendPropertyChanged("Condition");
					this.OnConditionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DencityCO2", DbType="Float")]
		public System.Nullable<double> DencityCO2
		{
			get
			{
				return this._DencityCO2;
			}
			set
			{
				if ((this._DencityCO2 != value))
				{
					this.OnDencityCO2Changing(value);
					this.SendPropertyChanging();
					this._DencityCO2 = value;
					this.SendPropertyChanged("DencityCO2");
					this.OnDencityCO2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DencityCH4", DbType="Float")]
		public System.Nullable<double> DencityCH4
		{
			get
			{
				return this._DencityCH4;
			}
			set
			{
				if ((this._DencityCH4 != value))
				{
					this.OnDencityCH4Changing(value);
					this.SendPropertyChanging();
					this._DencityCH4 = value;
					this.SendPropertyChanged("DencityCH4");
					this.OnDencityCH4Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GroupOfFuel")]
	public partial class GroupOfFuel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _GroupName;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnGroupNameChanging(string value);
    partial void OnGroupNameChanged();
    #endregion
		
		public GroupOfFuel()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupName", DbType="VarChar(500)")]
		public string GroupName
		{
			get
			{
				return this._GroupName;
			}
			set
			{
				if ((this._GroupName != value))
				{
					this.OnGroupNameChanging(value);
					this.SendPropertyChanging();
					this._GroupName = value;
					this.SendPropertyChanged("GroupName");
					this.OnGroupNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ProductionSite")]
	public partial class ProductionSite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _CompanyDO_id;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DateAdd;
		
		private System.Nullable<bool> _IsDeleted;
		
		private string _AdministrativeArea;
		
		private string _Region;
		
		private EntitySet<SourceOfEmission> _SourceOfEmissions;
		
		private EntityRef<CompanyDO> _CompanyDO;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCompanyDO_idChanging(int value);
    partial void OnCompanyDO_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateAddChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnAdministrativeAreaChanging(string value);
    partial void OnAdministrativeAreaChanged();
    partial void OnRegionChanging(string value);
    partial void OnRegionChanged();
    #endregion
		
		public ProductionSite()
		{
			this._SourceOfEmissions = new EntitySet<SourceOfEmission>(new Action<SourceOfEmission>(this.attach_SourceOfEmissions), new Action<SourceOfEmission>(this.detach_SourceOfEmissions));
			this._CompanyDO = default(EntityRef<CompanyDO>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CompanyDO_id", DbType="Int NOT NULL")]
		public int CompanyDO_id
		{
			get
			{
				return this._CompanyDO_id;
			}
			set
			{
				if ((this._CompanyDO_id != value))
				{
					if (this._CompanyDO.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCompanyDO_idChanging(value);
					this.SendPropertyChanging();
					this._CompanyDO_id = value;
					this.SendPropertyChanged("CompanyDO_id");
					this.OnCompanyDO_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(1000)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdd
		{
			get
			{
				return this._DateAdd;
			}
			set
			{
				if ((this._DateAdd != value))
				{
					this.OnDateAddChanging(value);
					this.SendPropertyChanging();
					this._DateAdd = value;
					this.SendPropertyChanged("DateAdd");
					this.OnDateAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdministrativeArea", DbType="VarChar(500)")]
		public string AdministrativeArea
		{
			get
			{
				return this._AdministrativeArea;
			}
			set
			{
				if ((this._AdministrativeArea != value))
				{
					this.OnAdministrativeAreaChanging(value);
					this.SendPropertyChanging();
					this._AdministrativeArea = value;
					this.SendPropertyChanged("AdministrativeArea");
					this.OnAdministrativeAreaChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Region", DbType="VarChar(500)")]
		public string Region
		{
			get
			{
				return this._Region;
			}
			set
			{
				if ((this._Region != value))
				{
					this.OnRegionChanging(value);
					this.SendPropertyChanging();
					this._Region = value;
					this.SendPropertyChanged("Region");
					this.OnRegionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionSite_SourceOfEmission", Storage="_SourceOfEmissions", ThisKey="id", OtherKey="ProductionSite_id")]
		public EntitySet<SourceOfEmission> SourceOfEmissions
		{
			get
			{
				return this._SourceOfEmissions;
			}
			set
			{
				this._SourceOfEmissions.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CompanyDO_ProductionSite", Storage="_CompanyDO", ThisKey="CompanyDO_id", OtherKey="id", IsForeignKey=true)]
		public CompanyDO CompanyDO
		{
			get
			{
				return this._CompanyDO.Entity;
			}
			set
			{
				CompanyDO previousValue = this._CompanyDO.Entity;
				if (((previousValue != value) 
							|| (this._CompanyDO.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CompanyDO.Entity = null;
						previousValue.ProductionSites.Remove(this);
					}
					this._CompanyDO.Entity = value;
					if ((value != null))
					{
						value.ProductionSites.Add(this);
						this._CompanyDO_id = value.id;
					}
					else
					{
						this._CompanyDO_id = default(int);
					}
					this.SendPropertyChanged("CompanyDO");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SourceOfEmissions(SourceOfEmission entity)
		{
			this.SendPropertyChanging();
			entity.ProductionSite = this;
		}
		
		private void detach_SourceOfEmissions(SourceOfEmission entity)
		{
			this.SendPropertyChanging();
			entity.ProductionSite = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SourceOfEmission")]
	public partial class SourceOfEmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _ProductionSite_id;
		
		private string _Name;
		
		private System.Nullable<System.DateTime> _DateAdd;
		
		private System.Nullable<bool> _IsDeleted;
		
		private string _Code;
		
		private EntitySet<SourceOfEmissionFuel> _SourceOfEmissionFuels;
		
		private EntityRef<ProductionSite> _ProductionSite;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnProductionSite_idChanging(int value);
    partial void OnProductionSite_idChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDateAddChanging(System.Nullable<System.DateTime> value);
    partial void OnDateAddChanged();
    partial void OnIsDeletedChanging(System.Nullable<bool> value);
    partial void OnIsDeletedChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    #endregion
		
		public SourceOfEmission()
		{
			this._SourceOfEmissionFuels = new EntitySet<SourceOfEmissionFuel>(new Action<SourceOfEmissionFuel>(this.attach_SourceOfEmissionFuels), new Action<SourceOfEmissionFuel>(this.detach_SourceOfEmissionFuels));
			this._ProductionSite = default(EntityRef<ProductionSite>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProductionSite_id", DbType="Int NOT NULL")]
		public int ProductionSite_id
		{
			get
			{
				return this._ProductionSite_id;
			}
			set
			{
				if ((this._ProductionSite_id != value))
				{
					if (this._ProductionSite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProductionSite_idChanging(value);
					this.SendPropertyChanging();
					this._ProductionSite_id = value;
					this.SendPropertyChanged("ProductionSite_id");
					this.OnProductionSite_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateAdd", DbType="DateTime")]
		public System.Nullable<System.DateTime> DateAdd
		{
			get
			{
				return this._DateAdd;
			}
			set
			{
				if ((this._DateAdd != value))
				{
					this.OnDateAddChanging(value);
					this.SendPropertyChanging();
					this._DateAdd = value;
					this.SendPropertyChanged("DateAdd");
					this.OnDateAddChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDeleted", DbType="Bit")]
		public System.Nullable<bool> IsDeleted
		{
			get
			{
				return this._IsDeleted;
			}
			set
			{
				if ((this._IsDeleted != value))
				{
					this.OnIsDeletedChanging(value);
					this.SendPropertyChanging();
					this._IsDeleted = value;
					this.SendPropertyChanged("IsDeleted");
					this.OnIsDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50)")]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceOfEmission_SourceOfEmissionFuel", Storage="_SourceOfEmissionFuels", ThisKey="id", OtherKey="SourceOfEmission_id")]
		public EntitySet<SourceOfEmissionFuel> SourceOfEmissionFuels
		{
			get
			{
				return this._SourceOfEmissionFuels;
			}
			set
			{
				this._SourceOfEmissionFuels.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="ProductionSite_SourceOfEmission", Storage="_ProductionSite", ThisKey="ProductionSite_id", OtherKey="id", IsForeignKey=true)]
		public ProductionSite ProductionSite
		{
			get
			{
				return this._ProductionSite.Entity;
			}
			set
			{
				ProductionSite previousValue = this._ProductionSite.Entity;
				if (((previousValue != value) 
							|| (this._ProductionSite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProductionSite.Entity = null;
						previousValue.SourceOfEmissions.Remove(this);
					}
					this._ProductionSite.Entity = value;
					if ((value != null))
					{
						value.SourceOfEmissions.Add(this);
						this._ProductionSite_id = value.id;
					}
					else
					{
						this._ProductionSite_id = default(int);
					}
					this.SendPropertyChanged("ProductionSite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_SourceOfEmissionFuels(SourceOfEmissionFuel entity)
		{
			this.SendPropertyChanging();
			entity.SourceOfEmission = this;
		}
		
		private void detach_SourceOfEmissionFuels(SourceOfEmissionFuel entity)
		{
			this.SendPropertyChanging();
			entity.SourceOfEmission = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SourceOfEmissionFuel")]
	public partial class SourceOfEmissionFuel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _SourceOfEmission_id;
		
		private System.Nullable<int> _CategoryOfFuel_id;
		
		private System.Nullable<int> _TypeOfFuelTable_id;
		
		private string _TypeOfFuelName;
		
		private System.Nullable<bool> _isDeleted;
		
		private EntitySet<CalculationResult> _CalculationResults;
		
		private EntityRef<CategoryOfFuel> _CategoryOfFuel;
		
		private EntityRef<SourceOfEmission> _SourceOfEmission;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnSourceOfEmission_idChanging(int value);
    partial void OnSourceOfEmission_idChanged();
    partial void OnCategoryOfFuel_idChanging(System.Nullable<int> value);
    partial void OnCategoryOfFuel_idChanged();
    partial void OnTypeOfFuelTable_idChanging(System.Nullable<int> value);
    partial void OnTypeOfFuelTable_idChanged();
    partial void OnTypeOfFuelNameChanging(string value);
    partial void OnTypeOfFuelNameChanged();
    partial void OnisDeletedChanging(System.Nullable<bool> value);
    partial void OnisDeletedChanged();
    #endregion
		
		public SourceOfEmissionFuel()
		{
			this._CalculationResults = new EntitySet<CalculationResult>(new Action<CalculationResult>(this.attach_CalculationResults), new Action<CalculationResult>(this.detach_CalculationResults));
			this._CategoryOfFuel = default(EntityRef<CategoryOfFuel>);
			this._SourceOfEmission = default(EntityRef<SourceOfEmission>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SourceOfEmission_id", DbType="Int NOT NULL")]
		public int SourceOfEmission_id
		{
			get
			{
				return this._SourceOfEmission_id;
			}
			set
			{
				if ((this._SourceOfEmission_id != value))
				{
					if (this._SourceOfEmission.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSourceOfEmission_idChanging(value);
					this.SendPropertyChanging();
					this._SourceOfEmission_id = value;
					this.SendPropertyChanged("SourceOfEmission_id");
					this.OnSourceOfEmission_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryOfFuel_id", DbType="Int")]
		public System.Nullable<int> CategoryOfFuel_id
		{
			get
			{
				return this._CategoryOfFuel_id;
			}
			set
			{
				if ((this._CategoryOfFuel_id != value))
				{
					if (this._CategoryOfFuel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryOfFuel_idChanging(value);
					this.SendPropertyChanging();
					this._CategoryOfFuel_id = value;
					this.SendPropertyChanged("CategoryOfFuel_id");
					this.OnCategoryOfFuel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfFuelTable_id", DbType="Int")]
		public System.Nullable<int> TypeOfFuelTable_id
		{
			get
			{
				return this._TypeOfFuelTable_id;
			}
			set
			{
				if ((this._TypeOfFuelTable_id != value))
				{
					this.OnTypeOfFuelTable_idChanging(value);
					this.SendPropertyChanging();
					this._TypeOfFuelTable_id = value;
					this.SendPropertyChanged("TypeOfFuelTable_id");
					this.OnTypeOfFuelTable_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfFuelName", DbType="VarChar(500)")]
		public string TypeOfFuelName
		{
			get
			{
				return this._TypeOfFuelName;
			}
			set
			{
				if ((this._TypeOfFuelName != value))
				{
					this.OnTypeOfFuelNameChanging(value);
					this.SendPropertyChanging();
					this._TypeOfFuelName = value;
					this.SendPropertyChanged("TypeOfFuelName");
					this.OnTypeOfFuelNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_isDeleted", DbType="Bit")]
		public System.Nullable<bool> isDeleted
		{
			get
			{
				return this._isDeleted;
			}
			set
			{
				if ((this._isDeleted != value))
				{
					this.OnisDeletedChanging(value);
					this.SendPropertyChanging();
					this._isDeleted = value;
					this.SendPropertyChanged("isDeleted");
					this.OnisDeletedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceOfEmissionFuel_CalculationResult", Storage="_CalculationResults", ThisKey="id", OtherKey="SourceOfEmissionFuel_id")]
		public EntitySet<CalculationResult> CalculationResults
		{
			get
			{
				return this._CalculationResults;
			}
			set
			{
				this._CalculationResults.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryOfFuel_SourceOfEmissionFuel", Storage="_CategoryOfFuel", ThisKey="CategoryOfFuel_id", OtherKey="id", IsForeignKey=true)]
		public CategoryOfFuel CategoryOfFuel
		{
			get
			{
				return this._CategoryOfFuel.Entity;
			}
			set
			{
				CategoryOfFuel previousValue = this._CategoryOfFuel.Entity;
				if (((previousValue != value) 
							|| (this._CategoryOfFuel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryOfFuel.Entity = null;
						previousValue.SourceOfEmissionFuels.Remove(this);
					}
					this._CategoryOfFuel.Entity = value;
					if ((value != null))
					{
						value.SourceOfEmissionFuels.Add(this);
						this._CategoryOfFuel_id = value.id;
					}
					else
					{
						this._CategoryOfFuel_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("CategoryOfFuel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SourceOfEmission_SourceOfEmissionFuel", Storage="_SourceOfEmission", ThisKey="SourceOfEmission_id", OtherKey="id", IsForeignKey=true)]
		public SourceOfEmission SourceOfEmission
		{
			get
			{
				return this._SourceOfEmission.Entity;
			}
			set
			{
				SourceOfEmission previousValue = this._SourceOfEmission.Entity;
				if (((previousValue != value) 
							|| (this._SourceOfEmission.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._SourceOfEmission.Entity = null;
						previousValue.SourceOfEmissionFuels.Remove(this);
					}
					this._SourceOfEmission.Entity = value;
					if ((value != null))
					{
						value.SourceOfEmissionFuels.Add(this);
						this._SourceOfEmission_id = value.id;
					}
					else
					{
						this._SourceOfEmission_id = default(int);
					}
					this.SendPropertyChanged("SourceOfEmission");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_CalculationResults(CalculationResult entity)
		{
			this.SendPropertyChanging();
			entity.SourceOfEmissionFuel = this;
		}
		
		private void detach_CalculationResults(CalculationResult entity)
		{
			this.SendPropertyChanging();
			entity.SourceOfEmissionFuel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfFuel")]
	public partial class TypeOfFuel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private string _Dimension;
		
		private System.Nullable<double> _ConversionFactor1;
		
		private System.Nullable<double> _ConversionFactor2;
		
		private System.Nullable<double> _EmissionFactor1;
		
		private System.Nullable<double> _EmissionFactor2;
		
		private System.Nullable<double> _CarbonContent1;
		
		private System.Nullable<double> _CarbonContent2;
		
		private System.Nullable<int> _GroupOfFuel_id;
		
		private EntitySet<TypesForCategoryFuel> _TypesForCategoryFuels;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDimensionChanging(string value);
    partial void OnDimensionChanged();
    partial void OnConversionFactor1Changing(System.Nullable<double> value);
    partial void OnConversionFactor1Changed();
    partial void OnConversionFactor2Changing(System.Nullable<double> value);
    partial void OnConversionFactor2Changed();
    partial void OnEmissionFactor1Changing(System.Nullable<double> value);
    partial void OnEmissionFactor1Changed();
    partial void OnEmissionFactor2Changing(System.Nullable<double> value);
    partial void OnEmissionFactor2Changed();
    partial void OnCarbonContent1Changing(System.Nullable<double> value);
    partial void OnCarbonContent1Changed();
    partial void OnCarbonContent2Changing(System.Nullable<double> value);
    partial void OnCarbonContent2Changed();
    partial void OnGroupOfFuel_idChanging(System.Nullable<int> value);
    partial void OnGroupOfFuel_idChanged();
    #endregion
		
		public TypeOfFuel()
		{
			this._TypesForCategoryFuels = new EntitySet<TypesForCategoryFuel>(new Action<TypesForCategoryFuel>(this.attach_TypesForCategoryFuels), new Action<TypesForCategoryFuel>(this.detach_TypesForCategoryFuels));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Dimension", DbType="VarChar(50)")]
		public string Dimension
		{
			get
			{
				return this._Dimension;
			}
			set
			{
				if ((this._Dimension != value))
				{
					this.OnDimensionChanging(value);
					this.SendPropertyChanging();
					this._Dimension = value;
					this.SendPropertyChanged("Dimension");
					this.OnDimensionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionFactor1", DbType="Float")]
		public System.Nullable<double> ConversionFactor1
		{
			get
			{
				return this._ConversionFactor1;
			}
			set
			{
				if ((this._ConversionFactor1 != value))
				{
					this.OnConversionFactor1Changing(value);
					this.SendPropertyChanging();
					this._ConversionFactor1 = value;
					this.SendPropertyChanged("ConversionFactor1");
					this.OnConversionFactor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionFactor2", DbType="Float")]
		public System.Nullable<double> ConversionFactor2
		{
			get
			{
				return this._ConversionFactor2;
			}
			set
			{
				if ((this._ConversionFactor2 != value))
				{
					this.OnConversionFactor2Changing(value);
					this.SendPropertyChanging();
					this._ConversionFactor2 = value;
					this.SendPropertyChanged("ConversionFactor2");
					this.OnConversionFactor2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmissionFactor1", DbType="Float")]
		public System.Nullable<double> EmissionFactor1
		{
			get
			{
				return this._EmissionFactor1;
			}
			set
			{
				if ((this._EmissionFactor1 != value))
				{
					this.OnEmissionFactor1Changing(value);
					this.SendPropertyChanging();
					this._EmissionFactor1 = value;
					this.SendPropertyChanged("EmissionFactor1");
					this.OnEmissionFactor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmissionFactor2", DbType="Float")]
		public System.Nullable<double> EmissionFactor2
		{
			get
			{
				return this._EmissionFactor2;
			}
			set
			{
				if ((this._EmissionFactor2 != value))
				{
					this.OnEmissionFactor2Changing(value);
					this.SendPropertyChanging();
					this._EmissionFactor2 = value;
					this.SendPropertyChanged("EmissionFactor2");
					this.OnEmissionFactor2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarbonContent1", DbType="Float")]
		public System.Nullable<double> CarbonContent1
		{
			get
			{
				return this._CarbonContent1;
			}
			set
			{
				if ((this._CarbonContent1 != value))
				{
					this.OnCarbonContent1Changing(value);
					this.SendPropertyChanging();
					this._CarbonContent1 = value;
					this.SendPropertyChanged("CarbonContent1");
					this.OnCarbonContent1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CarbonContent2", DbType="Float")]
		public System.Nullable<double> CarbonContent2
		{
			get
			{
				return this._CarbonContent2;
			}
			set
			{
				if ((this._CarbonContent2 != value))
				{
					this.OnCarbonContent2Changing(value);
					this.SendPropertyChanging();
					this._CarbonContent2 = value;
					this.SendPropertyChanged("CarbonContent2");
					this.OnCarbonContent2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupOfFuel_id", DbType="Int")]
		public System.Nullable<int> GroupOfFuel_id
		{
			get
			{
				return this._GroupOfFuel_id;
			}
			set
			{
				if ((this._GroupOfFuel_id != value))
				{
					this.OnGroupOfFuel_idChanging(value);
					this.SendPropertyChanging();
					this._GroupOfFuel_id = value;
					this.SendPropertyChanged("GroupOfFuel_id");
					this.OnGroupOfFuel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfFuel_TypesForCategoryFuel", Storage="_TypesForCategoryFuels", ThisKey="id", OtherKey="TypeOfFuel_id")]
		public EntitySet<TypesForCategoryFuel> TypesForCategoryFuels
		{
			get
			{
				return this._TypesForCategoryFuels;
			}
			set
			{
				this._TypesForCategoryFuels.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TypesForCategoryFuels(TypesForCategoryFuel entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfFuel = this;
		}
		
		private void detach_TypesForCategoryFuels(TypesForCategoryFuel entity)
		{
			this.SendPropertyChanging();
			entity.TypeOfFuel = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfFuelForFlareCombustion")]
	public partial class TypeOfFuelForFlareCombustion : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private System.Nullable<double> _EmissionFactorCO2;
		
		private System.Nullable<double> _EmissionFactorCH4;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnEmissionFactorCO2Changing(System.Nullable<double> value);
    partial void OnEmissionFactorCO2Changed();
    partial void OnEmissionFactorCH4Changing(System.Nullable<double> value);
    partial void OnEmissionFactorCH4Changed();
    #endregion
		
		public TypeOfFuelForFlareCombustion()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmissionFactorCO2", DbType="Float")]
		public System.Nullable<double> EmissionFactorCO2
		{
			get
			{
				return this._EmissionFactorCO2;
			}
			set
			{
				if ((this._EmissionFactorCO2 != value))
				{
					this.OnEmissionFactorCO2Changing(value);
					this.SendPropertyChanging();
					this._EmissionFactorCO2 = value;
					this.SendPropertyChanged("EmissionFactorCO2");
					this.OnEmissionFactorCO2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmissionFactorCH4", DbType="Float")]
		public System.Nullable<double> EmissionFactorCH4
		{
			get
			{
				return this._EmissionFactorCH4;
			}
			set
			{
				if ((this._EmissionFactorCH4 != value))
				{
					this.OnEmissionFactorCH4Changing(value);
					this.SendPropertyChanging();
					this._EmissionFactorCH4 = value;
					this.SendPropertyChanged("EmissionFactorCH4");
					this.OnEmissionFactorCH4Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfFuelForFugitivEmission")]
	public partial class TypeOfFuelForFugitivEmission : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _Name;
		
		private System.Nullable<double> _CO2Content;
		
		private System.Nullable<double> _CH4Content;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnCO2ContentChanging(System.Nullable<double> value);
    partial void OnCO2ContentChanged();
    partial void OnCH4ContentChanging(System.Nullable<double> value);
    partial void OnCH4ContentChanged();
    #endregion
		
		public TypeOfFuelForFugitivEmission()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CO2Content", DbType="Float")]
		public System.Nullable<double> CO2Content
		{
			get
			{
				return this._CO2Content;
			}
			set
			{
				if ((this._CO2Content != value))
				{
					this.OnCO2ContentChanging(value);
					this.SendPropertyChanging();
					this._CO2Content = value;
					this.SendPropertyChanged("CO2Content");
					this.OnCO2ContentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CH4Content", DbType="Float")]
		public System.Nullable<double> CH4Content
		{
			get
			{
				return this._CH4Content;
			}
			set
			{
				if ((this._CH4Content != value))
				{
					this.OnCH4ContentChanging(value);
					this.SendPropertyChanging();
					this._CH4Content = value;
					this.SendPropertyChanged("CH4Content");
					this.OnCH4ContentChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeOfFuelForTransport")]
	public partial class TypeOfFuelForTransport : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private System.Nullable<double> _EmissionFactor;
		
		private System.Nullable<double> _ConversionFactor1;
		
		private System.Nullable<double> _ConversionFactor2;
		
		private System.Nullable<double> _Density;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnEmissionFactorChanging(System.Nullable<double> value);
    partial void OnEmissionFactorChanged();
    partial void OnConversionFactor1Changing(System.Nullable<double> value);
    partial void OnConversionFactor1Changed();
    partial void OnConversionFactor2Changing(System.Nullable<double> value);
    partial void OnConversionFactor2Changed();
    partial void OnDensityChanging(System.Nullable<double> value);
    partial void OnDensityChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public TypeOfFuelForTransport()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmissionFactor", DbType="Float")]
		public System.Nullable<double> EmissionFactor
		{
			get
			{
				return this._EmissionFactor;
			}
			set
			{
				if ((this._EmissionFactor != value))
				{
					this.OnEmissionFactorChanging(value);
					this.SendPropertyChanging();
					this._EmissionFactor = value;
					this.SendPropertyChanged("EmissionFactor");
					this.OnEmissionFactorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionFactor1", DbType="Float")]
		public System.Nullable<double> ConversionFactor1
		{
			get
			{
				return this._ConversionFactor1;
			}
			set
			{
				if ((this._ConversionFactor1 != value))
				{
					this.OnConversionFactor1Changing(value);
					this.SendPropertyChanging();
					this._ConversionFactor1 = value;
					this.SendPropertyChanged("ConversionFactor1");
					this.OnConversionFactor1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConversionFactor2", DbType="Float")]
		public System.Nullable<double> ConversionFactor2
		{
			get
			{
				return this._ConversionFactor2;
			}
			set
			{
				if ((this._ConversionFactor2 != value))
				{
					this.OnConversionFactor2Changing(value);
					this.SendPropertyChanging();
					this._ConversionFactor2 = value;
					this.SendPropertyChanged("ConversionFactor2");
					this.OnConversionFactor2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Density", DbType="Float")]
		public System.Nullable<double> Density
		{
			get
			{
				return this._Density;
			}
			set
			{
				if ((this._Density != value))
				{
					this.OnDensityChanging(value);
					this.SendPropertyChanging();
					this._Density = value;
					this.SendPropertyChanged("Density");
					this.OnDensityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(500)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypesForCategoryFuel")]
	public partial class TypesForCategoryFuel : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _CategoryOfFuel_id;
		
		private int _TypeOfFuel_id;
		
		private EntityRef<CategoryOfFuel> _CategoryOfFuel;
		
		private EntityRef<TypeOfFuel> _TypeOfFuel;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnCategoryOfFuel_idChanging(int value);
    partial void OnCategoryOfFuel_idChanged();
    partial void OnTypeOfFuel_idChanging(int value);
    partial void OnTypeOfFuel_idChanged();
    #endregion
		
		public TypesForCategoryFuel()
		{
			this._CategoryOfFuel = default(EntityRef<CategoryOfFuel>);
			this._TypeOfFuel = default(EntityRef<TypeOfFuel>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryOfFuel_id", DbType="Int NOT NULL")]
		public int CategoryOfFuel_id
		{
			get
			{
				return this._CategoryOfFuel_id;
			}
			set
			{
				if ((this._CategoryOfFuel_id != value))
				{
					if (this._CategoryOfFuel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryOfFuel_idChanging(value);
					this.SendPropertyChanging();
					this._CategoryOfFuel_id = value;
					this.SendPropertyChanged("CategoryOfFuel_id");
					this.OnCategoryOfFuel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeOfFuel_id", DbType="Int NOT NULL")]
		public int TypeOfFuel_id
		{
			get
			{
				return this._TypeOfFuel_id;
			}
			set
			{
				if ((this._TypeOfFuel_id != value))
				{
					if (this._TypeOfFuel.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeOfFuel_idChanging(value);
					this.SendPropertyChanging();
					this._TypeOfFuel_id = value;
					this.SendPropertyChanged("TypeOfFuel_id");
					this.OnTypeOfFuel_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CategoryOfFuel_TypesForCategoryFuel", Storage="_CategoryOfFuel", ThisKey="CategoryOfFuel_id", OtherKey="id", IsForeignKey=true)]
		public CategoryOfFuel CategoryOfFuel
		{
			get
			{
				return this._CategoryOfFuel.Entity;
			}
			set
			{
				CategoryOfFuel previousValue = this._CategoryOfFuel.Entity;
				if (((previousValue != value) 
							|| (this._CategoryOfFuel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CategoryOfFuel.Entity = null;
						previousValue.TypesForCategoryFuels.Remove(this);
					}
					this._CategoryOfFuel.Entity = value;
					if ((value != null))
					{
						value.TypesForCategoryFuels.Add(this);
						this._CategoryOfFuel_id = value.id;
					}
					else
					{
						this._CategoryOfFuel_id = default(int);
					}
					this.SendPropertyChanged("CategoryOfFuel");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeOfFuel_TypesForCategoryFuel", Storage="_TypeOfFuel", ThisKey="TypeOfFuel_id", OtherKey="id", IsForeignKey=true)]
		public TypeOfFuel TypeOfFuel
		{
			get
			{
				return this._TypeOfFuel.Entity;
			}
			set
			{
				TypeOfFuel previousValue = this._TypeOfFuel.Entity;
				if (((previousValue != value) 
							|| (this._TypeOfFuel.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeOfFuel.Entity = null;
						previousValue.TypesForCategoryFuels.Remove(this);
					}
					this._TypeOfFuel.Entity = value;
					if ((value != null))
					{
						value.TypesForCategoryFuels.Add(this);
						this._TypeOfFuel_id = value.id;
					}
					else
					{
						this._TypeOfFuel_id = default(int);
					}
					this.SendPropertyChanged("TypeOfFuel");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
